// Code generated by mockery v2.39.1. DO NOT EDIT.

package osutils_mocks

import (
	"github.com/flywingedai/components/tests"

	csv "encoding/csv"

	exec "os/exec"

	fs "io/fs"

	io "io"

	mock "github.com/stretchr/testify/mock"

	os "os"

	syscall "syscall"
)

// Osutils is an autogenerated mock type for the Osutils type
type Osutils struct {
	mock.Mock
}

type Osutils_Expecter struct {
	mock *mock.Mock
}

func (_m *Osutils) EXPECT() *Osutils_Expecter {
	return &Osutils_Expecter{mock: &_m.Mock}
}

// CSVNewReader provides a mock function with given fields: r
func (_m *Osutils) CSVNewReader(r io.Reader) *csv.Reader {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CSVNewReader")
	}

	var r0 *csv.Reader
	if rf, ok := ret.Get(0).(func(io.Reader) *csv.Reader); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csv.Reader)
		}
	}

	return r0
}

// Osutils_CSVNewReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CSVNewReader'
type Osutils_CSVNewReader_Call struct {
	*mock.Call
}

// CSVNewReader is a helper method to define mock.On call
//   - r io.Reader
func (_e *Osutils_Expecter) CSVNewReader(r interface{}) *Osutils_CSVNewReader_Call {
	return &Osutils_CSVNewReader_Call{Call: _e.mock.On("CSVNewReader", r)}
}

func (_c *Osutils_CSVNewReader_Call) Run(run func(r io.Reader)) *Osutils_CSVNewReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *Osutils_CSVNewReader_Call) Return(_a0 *csv.Reader) *Osutils_CSVNewReader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_CSVNewReader_Call) RunAndReturn(run func(io.Reader) *csv.Reader) *Osutils_CSVNewReader_Call {
	_c.Call.Return(run)
	return _c
}

// CSVRead provides a mock function with given fields: csvReader
func (_m *Osutils) CSVRead(csvReader *csv.Reader) ([]string, error) {
	ret := _m.Called(csvReader)

	if len(ret) == 0 {
		panic("no return value specified for CSVRead")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*csv.Reader) ([]string, error)); ok {
		return rf(csvReader)
	}
	if rf, ok := ret.Get(0).(func(*csv.Reader) []string); ok {
		r0 = rf(csvReader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*csv.Reader) error); ok {
		r1 = rf(csvReader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_CSVRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CSVRead'
type Osutils_CSVRead_Call struct {
	*mock.Call
}

// CSVRead is a helper method to define mock.On call
//   - csvReader *csv.Reader
func (_e *Osutils_Expecter) CSVRead(csvReader interface{}) *Osutils_CSVRead_Call {
	return &Osutils_CSVRead_Call{Call: _e.mock.On("CSVRead", csvReader)}
}

func (_c *Osutils_CSVRead_Call) Run(run func(csvReader *csv.Reader)) *Osutils_CSVRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*csv.Reader))
	})
	return _c
}

func (_c *Osutils_CSVRead_Call) Return(_a0 []string, _a1 error) *Osutils_CSVRead_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_CSVRead_Call) RunAndReturn(run func(*csv.Reader) ([]string, error)) *Osutils_CSVRead_Call {
	_c.Call.Return(run)
	return _c
}

// CommandOutput provides a mock function with given fields: cmd
func (_m *Osutils) CommandOutput(cmd *exec.Cmd) ([]byte, error) {
	ret := _m.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for CommandOutput")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*exec.Cmd) ([]byte, error)); ok {
		return rf(cmd)
	}
	if rf, ok := ret.Get(0).(func(*exec.Cmd) []byte); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*exec.Cmd) error); ok {
		r1 = rf(cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_CommandOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandOutput'
type Osutils_CommandOutput_Call struct {
	*mock.Call
}

// CommandOutput is a helper method to define mock.On call
//   - cmd *exec.Cmd
func (_e *Osutils_Expecter) CommandOutput(cmd interface{}) *Osutils_CommandOutput_Call {
	return &Osutils_CommandOutput_Call{Call: _e.mock.On("CommandOutput", cmd)}
}

func (_c *Osutils_CommandOutput_Call) Run(run func(cmd *exec.Cmd)) *Osutils_CommandOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*exec.Cmd))
	})
	return _c
}

func (_c *Osutils_CommandOutput_Call) Return(_a0 []byte, _a1 error) *Osutils_CommandOutput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_CommandOutput_Call) RunAndReturn(run func(*exec.Cmd) ([]byte, error)) *Osutils_CommandOutput_Call {
	_c.Call.Return(run)
	return _c
}

// CommandStart provides a mock function with given fields: cmd
func (_m *Osutils) CommandStart(cmd *exec.Cmd) error {
	ret := _m.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for CommandStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*exec.Cmd) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Osutils_CommandStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandStart'
type Osutils_CommandStart_Call struct {
	*mock.Call
}

// CommandStart is a helper method to define mock.On call
//   - cmd *exec.Cmd
func (_e *Osutils_Expecter) CommandStart(cmd interface{}) *Osutils_CommandStart_Call {
	return &Osutils_CommandStart_Call{Call: _e.mock.On("CommandStart", cmd)}
}

func (_c *Osutils_CommandStart_Call) Run(run func(cmd *exec.Cmd)) *Osutils_CommandStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*exec.Cmd))
	})
	return _c
}

func (_c *Osutils_CommandStart_Call) Return(_a0 error) *Osutils_CommandStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_CommandStart_Call) RunAndReturn(run func(*exec.Cmd) error) *Osutils_CommandStart_Call {
	_c.Call.Return(run)
	return _c
}

// CommandWait provides a mock function with given fields: cmd
func (_m *Osutils) CommandWait(cmd *exec.Cmd) error {
	ret := _m.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for CommandWait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*exec.Cmd) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Osutils_CommandWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandWait'
type Osutils_CommandWait_Call struct {
	*mock.Call
}

// CommandWait is a helper method to define mock.On call
//   - cmd *exec.Cmd
func (_e *Osutils_Expecter) CommandWait(cmd interface{}) *Osutils_CommandWait_Call {
	return &Osutils_CommandWait_Call{Call: _e.mock.On("CommandWait", cmd)}
}

func (_c *Osutils_CommandWait_Call) Run(run func(cmd *exec.Cmd)) *Osutils_CommandWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*exec.Cmd))
	})
	return _c
}

func (_c *Osutils_CommandWait_Call) Return(_a0 error) *Osutils_CommandWait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_CommandWait_Call) RunAndReturn(run func(*exec.Cmd) error) *Osutils_CommandWait_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: name
func (_m *Osutils) Create(name string) (*os.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Osutils_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *Osutils_Expecter) Create(name interface{}) *Osutils_Create_Call {
	return &Osutils_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *Osutils_Create_Call) Run(run func(name string)) *Osutils_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Osutils_Create_Call) Return(_a0 *os.File, _a1 error) *Osutils_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_Create_Call) RunAndReturn(run func(string) (*os.File, error)) *Osutils_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Getenv provides a mock function with given fields: key
func (_m *Osutils) Getenv(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Getenv")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Osutils_Getenv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Getenv'
type Osutils_Getenv_Call struct {
	*mock.Call
}

// Getenv is a helper method to define mock.On call
//   - key string
func (_e *Osutils_Expecter) Getenv(key interface{}) *Osutils_Getenv_Call {
	return &Osutils_Getenv_Call{Call: _e.mock.On("Getenv", key)}
}

func (_c *Osutils_Getenv_Call) Run(run func(key string)) *Osutils_Getenv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Osutils_Getenv_Call) Return(_a0 string) *Osutils_Getenv_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_Getenv_Call) RunAndReturn(run func(string) string) *Osutils_Getenv_Call {
	_c.Call.Return(run)
	return _c
}

// IoReadAll provides a mock function with given fields: r
func (_m *Osutils) IoReadAll(r io.Reader) ([]byte, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IoReadAll")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) ([]byte, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) []byte); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_IoReadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IoReadAll'
type Osutils_IoReadAll_Call struct {
	*mock.Call
}

// IoReadAll is a helper method to define mock.On call
//   - r io.Reader
func (_e *Osutils_Expecter) IoReadAll(r interface{}) *Osutils_IoReadAll_Call {
	return &Osutils_IoReadAll_Call{Call: _e.mock.On("IoReadAll", r)}
}

func (_c *Osutils_IoReadAll_Call) Run(run func(r io.Reader)) *Osutils_IoReadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *Osutils_IoReadAll_Call) Return(_a0 []byte, _a1 error) *Osutils_IoReadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_IoReadAll_Call) RunAndReturn(run func(io.Reader) ([]byte, error)) *Osutils_IoReadAll_Call {
	_c.Call.Return(run)
	return _c
}

// JsonMarshal provides a mock function with given fields: v
func (_m *Osutils) JsonMarshal(v interface{}) ([]byte, error) {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for JsonMarshal")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]byte, error)); ok {
		return rf(v)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_JsonMarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JsonMarshal'
type Osutils_JsonMarshal_Call struct {
	*mock.Call
}

// JsonMarshal is a helper method to define mock.On call
//   - v interface{}
func (_e *Osutils_Expecter) JsonMarshal(v interface{}) *Osutils_JsonMarshal_Call {
	return &Osutils_JsonMarshal_Call{Call: _e.mock.On("JsonMarshal", v)}
}

func (_c *Osutils_JsonMarshal_Call) Run(run func(v interface{})) *Osutils_JsonMarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Osutils_JsonMarshal_Call) Return(_a0 []byte, _a1 error) *Osutils_JsonMarshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_JsonMarshal_Call) RunAndReturn(run func(interface{}) ([]byte, error)) *Osutils_JsonMarshal_Call {
	_c.Call.Return(run)
	return _c
}

// JsonMarshalIndent provides a mock function with given fields: v, prefix, indent
func (_m *Osutils) JsonMarshalIndent(v interface{}, prefix string, indent string) ([]byte, error) {
	ret := _m.Called(v, prefix, indent)

	if len(ret) == 0 {
		panic("no return value specified for JsonMarshalIndent")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string) ([]byte, error)); ok {
		return rf(v, prefix, indent)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, string) []byte); ok {
		r0 = rf(v, prefix, indent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, string) error); ok {
		r1 = rf(v, prefix, indent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_JsonMarshalIndent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JsonMarshalIndent'
type Osutils_JsonMarshalIndent_Call struct {
	*mock.Call
}

// JsonMarshalIndent is a helper method to define mock.On call
//   - v interface{}
//   - prefix string
//   - indent string
func (_e *Osutils_Expecter) JsonMarshalIndent(v interface{}, prefix interface{}, indent interface{}) *Osutils_JsonMarshalIndent_Call {
	return &Osutils_JsonMarshalIndent_Call{Call: _e.mock.On("JsonMarshalIndent", v, prefix, indent)}
}

func (_c *Osutils_JsonMarshalIndent_Call) Run(run func(v interface{}, prefix string, indent string)) *Osutils_JsonMarshalIndent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Osutils_JsonMarshalIndent_Call) Return(_a0 []byte, _a1 error) *Osutils_JsonMarshalIndent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_JsonMarshalIndent_Call) RunAndReturn(run func(interface{}, string, string) ([]byte, error)) *Osutils_JsonMarshalIndent_Call {
	_c.Call.Return(run)
	return _c
}

// JsonUnmarshal provides a mock function with given fields: data, v
func (_m *Osutils) JsonUnmarshal(data []byte, v interface{}) error {
	ret := _m.Called(data, v)

	if len(ret) == 0 {
		panic("no return value specified for JsonUnmarshal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(data, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Osutils_JsonUnmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JsonUnmarshal'
type Osutils_JsonUnmarshal_Call struct {
	*mock.Call
}

// JsonUnmarshal is a helper method to define mock.On call
//   - data []byte
//   - v interface{}
func (_e *Osutils_Expecter) JsonUnmarshal(data interface{}, v interface{}) *Osutils_JsonUnmarshal_Call {
	return &Osutils_JsonUnmarshal_Call{Call: _e.mock.On("JsonUnmarshal", data, v)}
}

func (_c *Osutils_JsonUnmarshal_Call) Run(run func(data []byte, v interface{})) *Osutils_JsonUnmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(interface{}))
	})
	return _c
}

func (_c *Osutils_JsonUnmarshal_Call) Return(_a0 error) *Osutils_JsonUnmarshal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_JsonUnmarshal_Call) RunAndReturn(run func([]byte, interface{}) error) *Osutils_JsonUnmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// Mkdir provides a mock function with given fields: name, mode
func (_m *Osutils) Mkdir(name string, mode fs.FileMode) error {
	ret := _m.Called(name, mode)

	if len(ret) == 0 {
		panic("no return value specified for Mkdir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(name, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Osutils_Mkdir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mkdir'
type Osutils_Mkdir_Call struct {
	*mock.Call
}

// Mkdir is a helper method to define mock.On call
//   - name string
//   - mode fs.FileMode
func (_e *Osutils_Expecter) Mkdir(name interface{}, mode interface{}) *Osutils_Mkdir_Call {
	return &Osutils_Mkdir_Call{Call: _e.mock.On("Mkdir", name, mode)}
}

func (_c *Osutils_Mkdir_Call) Run(run func(name string, mode fs.FileMode)) *Osutils_Mkdir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.FileMode))
	})
	return _c
}

func (_c *Osutils_Mkdir_Call) Return(_a0 error) *Osutils_Mkdir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_Mkdir_Call) RunAndReturn(run func(string, fs.FileMode) error) *Osutils_Mkdir_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function with given fields: name, mode
func (_m *Osutils) MkdirAll(name string, mode fs.FileMode) error {
	ret := _m.Called(name, mode)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(name, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Osutils_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type Osutils_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - name string
//   - mode fs.FileMode
func (_e *Osutils_Expecter) MkdirAll(name interface{}, mode interface{}) *Osutils_MkdirAll_Call {
	return &Osutils_MkdirAll_Call{Call: _e.mock.On("MkdirAll", name, mode)}
}

func (_c *Osutils_MkdirAll_Call) Run(run func(name string, mode fs.FileMode)) *Osutils_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.FileMode))
	})
	return _c
}

func (_c *Osutils_MkdirAll_Call) Return(_a0 error) *Osutils_MkdirAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_MkdirAll_Call) RunAndReturn(run func(string, fs.FileMode) error) *Osutils_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: name
func (_m *Osutils) Open(name string) (*os.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type Osutils_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - name string
func (_e *Osutils_Expecter) Open(name interface{}) *Osutils_Open_Call {
	return &Osutils_Open_Call{Call: _e.mock.On("Open", name)}
}

func (_c *Osutils_Open_Call) Run(run func(name string)) *Osutils_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Osutils_Open_Call) Return(_a0 *os.File, _a1 error) *Osutils_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_Open_Call) RunAndReturn(run func(string) (*os.File, error)) *Osutils_Open_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDir provides a mock function with given fields: name
func (_m *Osutils) ReadDir(name string) ([]fs.DirEntry, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []fs.DirEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]fs.DirEntry, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []fs.DirEntry); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.DirEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type Osutils_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - name string
func (_e *Osutils_Expecter) ReadDir(name interface{}) *Osutils_ReadDir_Call {
	return &Osutils_ReadDir_Call{Call: _e.mock.On("ReadDir", name)}
}

func (_c *Osutils_ReadDir_Call) Run(run func(name string)) *Osutils_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Osutils_ReadDir_Call) Return(_a0 []fs.DirEntry, _a1 error) *Osutils_ReadDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_ReadDir_Call) RunAndReturn(run func(string) ([]fs.DirEntry, error)) *Osutils_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: name
func (_m *Osutils) Remove(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Osutils_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Osutils_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - name string
func (_e *Osutils_Expecter) Remove(name interface{}) *Osutils_Remove_Call {
	return &Osutils_Remove_Call{Call: _e.mock.On("Remove", name)}
}

func (_c *Osutils_Remove_Call) Run(run func(name string)) *Osutils_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Osutils_Remove_Call) Return(_a0 error) *Osutils_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_Remove_Call) RunAndReturn(run func(string) error) *Osutils_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAll provides a mock function with given fields: path
func (_m *Osutils) RemoveAll(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Osutils_RemoveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAll'
type Osutils_RemoveAll_Call struct {
	*mock.Call
}

// RemoveAll is a helper method to define mock.On call
//   - path string
func (_e *Osutils_Expecter) RemoveAll(path interface{}) *Osutils_RemoveAll_Call {
	return &Osutils_RemoveAll_Call{Call: _e.mock.On("RemoveAll", path)}
}

func (_c *Osutils_RemoveAll_Call) Run(run func(path string)) *Osutils_RemoveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Osutils_RemoveAll_Call) Return(_a0 error) *Osutils_RemoveAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_RemoveAll_Call) RunAndReturn(run func(string) error) *Osutils_RemoveAll_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: name
func (_m *Osutils) Stat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type Osutils_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *Osutils_Expecter) Stat(name interface{}) *Osutils_Stat_Call {
	return &Osutils_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *Osutils_Stat_Call) Run(run func(name string)) *Osutils_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Osutils_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *Osutils_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_Stat_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *Osutils_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// StdoutPipe provides a mock function with given fields: cmd
func (_m *Osutils) StdoutPipe(cmd *exec.Cmd) (io.ReadCloser, error) {
	ret := _m.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for StdoutPipe")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(*exec.Cmd) (io.ReadCloser, error)); ok {
		return rf(cmd)
	}
	if rf, ok := ret.Get(0).(func(*exec.Cmd) io.ReadCloser); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(*exec.Cmd) error); ok {
		r1 = rf(cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Osutils_StdoutPipe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StdoutPipe'
type Osutils_StdoutPipe_Call struct {
	*mock.Call
}

// StdoutPipe is a helper method to define mock.On call
//   - cmd *exec.Cmd
func (_e *Osutils_Expecter) StdoutPipe(cmd interface{}) *Osutils_StdoutPipe_Call {
	return &Osutils_StdoutPipe_Call{Call: _e.mock.On("StdoutPipe", cmd)}
}

func (_c *Osutils_StdoutPipe_Call) Run(run func(cmd *exec.Cmd)) *Osutils_StdoutPipe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*exec.Cmd))
	})
	return _c
}

func (_c *Osutils_StdoutPipe_Call) Return(_a0 io.ReadCloser, _a1 error) *Osutils_StdoutPipe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Osutils_StdoutPipe_Call) RunAndReturn(run func(*exec.Cmd) (io.ReadCloser, error)) *Osutils_StdoutPipe_Call {
	_c.Call.Return(run)
	return _c
}

// SyscallKill provides a mock function with given fields: pid, sig
func (_m *Osutils) SyscallKill(pid int, sig syscall.Signal) error {
	ret := _m.Called(pid, sig)

	if len(ret) == 0 {
		panic("no return value specified for SyscallKill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, syscall.Signal) error); ok {
		r0 = rf(pid, sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Osutils_SyscallKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyscallKill'
type Osutils_SyscallKill_Call struct {
	*mock.Call
}

// SyscallKill is a helper method to define mock.On call
//   - pid int
//   - sig syscall.Signal
func (_e *Osutils_Expecter) SyscallKill(pid interface{}, sig interface{}) *Osutils_SyscallKill_Call {
	return &Osutils_SyscallKill_Call{Call: _e.mock.On("SyscallKill", pid, sig)}
}

func (_c *Osutils_SyscallKill_Call) Run(run func(pid int, sig syscall.Signal)) *Osutils_SyscallKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(syscall.Signal))
	})
	return _c
}

func (_c *Osutils_SyscallKill_Call) Return(_a0 error) *Osutils_SyscallKill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Osutils_SyscallKill_Call) RunAndReturn(run func(int, syscall.Signal) error) *Osutils_SyscallKill_Call {
	_c.Call.Return(run)
	return _c
}

// NewOsutils creates a new instance of Osutils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOsutils(t interface {
	mock.TestingT
	Cleanup(func())
}) *Osutils {
	mock := &Osutils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code below was generated by components. DO NOT EDIT.
// Component version: v0.1.0

type Osutils_ExpecterChain[M any] func(*M) *Osutils_Expecter

func Create_Osutils_ExpecterChain[M any](fetch func(*M) *Osutils) Osutils_ExpecterChain[M] {
	return func(m *M) *Osutils_Expecter {
		c := fetch(m)
		return c.EXPECT()
	}
}

type Osutils_CSVNewReaderChain[M any] func(*M) *Osutils_CSVNewReader_Call

func (_c Osutils_ExpecterChain[M]) CSVNewReader(r interface{}) Osutils_CSVNewReaderChain[M] {
	return func(m *M) *Osutils_CSVNewReader_Call {
		expecter := _c(m)
		return expecter.CSVNewReader(r)
	}
}

func (_c Osutils_CSVNewReaderChain[M]) Run(run func(r io.Reader)) Osutils_CSVNewReaderChain[M] {
	return func(m *M) *Osutils_CSVNewReader_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_CSVNewReaderChain[M]) Return(_a0 *csv.Reader) Osutils_CSVNewReaderChain[M] {
	return func(m *M) *Osutils_CSVNewReader_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Osutils_CSVNewReaderChain[M]) RunAndReturn(run func(r io.Reader) *csv.Reader) Osutils_CSVNewReaderChain[M] {
	return func(m *M) *Osutils_CSVNewReader_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) CSVNewReader_Pointer(r interface{}) Osutils_CSVNewReaderChain[M] {
	return func(m *M) *Osutils_CSVNewReader_Call {
		expecter := _c(m)
		return expecter.CSVNewReader(tests.RemoveInterfacePointer[io.Reader](r))
	}
}

func (_c Osutils_CSVNewReaderChain[M]) Return_Pointer(_a0 **csv.Reader) Osutils_CSVNewReaderChain[M] {
	return func(m *M) *Osutils_CSVNewReader_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}

type Osutils_CSVReadChain[M any] func(*M) *Osutils_CSVRead_Call

func (_c Osutils_ExpecterChain[M]) CSVRead(csvReader interface{}) Osutils_CSVReadChain[M] {
	return func(m *M) *Osutils_CSVRead_Call {
		expecter := _c(m)
		return expecter.CSVRead(csvReader)
	}
}

func (_c Osutils_CSVReadChain[M]) Run(run func(csvReader *csv.Reader)) Osutils_CSVReadChain[M] {
	return func(m *M) *Osutils_CSVRead_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_CSVReadChain[M]) Return(record []string, err error) Osutils_CSVReadChain[M] {
	return func(m *M) *Osutils_CSVRead_Call {
		call := _c(m)
		return call.Return(record, err)
	}
}

func (_c Osutils_CSVReadChain[M]) RunAndReturn(run func(csvReader *csv.Reader) ([]string, error)) Osutils_CSVReadChain[M] {
	return func(m *M) *Osutils_CSVRead_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) CSVRead_Pointer(csvReader interface{}) Osutils_CSVReadChain[M] {
	return func(m *M) *Osutils_CSVRead_Call {
		expecter := _c(m)
		return expecter.CSVRead(tests.RemoveInterfacePointer[*csv.Reader](csvReader))
	}
}

func (_c Osutils_CSVReadChain[M]) Return_Pointer(record *[]string, err *error) Osutils_CSVReadChain[M] {
	return func(m *M) *Osutils_CSVRead_Call {
		call := _c(m)
		return call.Return(*record, *err)
	}
}

type Osutils_CommandStartChain[M any] func(*M) *Osutils_CommandStart_Call

func (_c Osutils_ExpecterChain[M]) CommandStart(cmd interface{}) Osutils_CommandStartChain[M] {
	return func(m *M) *Osutils_CommandStart_Call {
		expecter := _c(m)
		return expecter.CommandStart(cmd)
	}
}

func (_c Osutils_CommandStartChain[M]) Run(run func(cmd *exec.Cmd)) Osutils_CommandStartChain[M] {
	return func(m *M) *Osutils_CommandStart_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_CommandStartChain[M]) Return(_a0 error) Osutils_CommandStartChain[M] {
	return func(m *M) *Osutils_CommandStart_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Osutils_CommandStartChain[M]) RunAndReturn(run func(cmd *exec.Cmd) error) Osutils_CommandStartChain[M] {
	return func(m *M) *Osutils_CommandStart_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) CommandStart_Pointer(cmd interface{}) Osutils_CommandStartChain[M] {
	return func(m *M) *Osutils_CommandStart_Call {
		expecter := _c(m)
		return expecter.CommandStart(tests.RemoveInterfacePointer[*exec.Cmd](cmd))
	}
}

func (_c Osutils_CommandStartChain[M]) Return_Pointer(_a0 *error) Osutils_CommandStartChain[M] {
	return func(m *M) *Osutils_CommandStart_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}

type Osutils_CommandWaitChain[M any] func(*M) *Osutils_CommandWait_Call

func (_c Osutils_ExpecterChain[M]) CommandWait(cmd interface{}) Osutils_CommandWaitChain[M] {
	return func(m *M) *Osutils_CommandWait_Call {
		expecter := _c(m)
		return expecter.CommandWait(cmd)
	}
}

func (_c Osutils_CommandWaitChain[M]) Run(run func(cmd *exec.Cmd)) Osutils_CommandWaitChain[M] {
	return func(m *M) *Osutils_CommandWait_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_CommandWaitChain[M]) Return(_a0 error) Osutils_CommandWaitChain[M] {
	return func(m *M) *Osutils_CommandWait_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Osutils_CommandWaitChain[M]) RunAndReturn(run func(cmd *exec.Cmd) error) Osutils_CommandWaitChain[M] {
	return func(m *M) *Osutils_CommandWait_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) CommandWait_Pointer(cmd interface{}) Osutils_CommandWaitChain[M] {
	return func(m *M) *Osutils_CommandWait_Call {
		expecter := _c(m)
		return expecter.CommandWait(tests.RemoveInterfacePointer[*exec.Cmd](cmd))
	}
}

func (_c Osutils_CommandWaitChain[M]) Return_Pointer(_a0 *error) Osutils_CommandWaitChain[M] {
	return func(m *M) *Osutils_CommandWait_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}

type Osutils_CommandOutputChain[M any] func(*M) *Osutils_CommandOutput_Call

func (_c Osutils_ExpecterChain[M]) CommandOutput(cmd interface{}) Osutils_CommandOutputChain[M] {
	return func(m *M) *Osutils_CommandOutput_Call {
		expecter := _c(m)
		return expecter.CommandOutput(cmd)
	}
}

func (_c Osutils_CommandOutputChain[M]) Run(run func(cmd *exec.Cmd)) Osutils_CommandOutputChain[M] {
	return func(m *M) *Osutils_CommandOutput_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_CommandOutputChain[M]) Return(_a0 []byte, _a1 error) Osutils_CommandOutputChain[M] {
	return func(m *M) *Osutils_CommandOutput_Call {
		call := _c(m)
		return call.Return(_a0, _a1)
	}
}

func (_c Osutils_CommandOutputChain[M]) RunAndReturn(run func(cmd *exec.Cmd) ([]byte, error)) Osutils_CommandOutputChain[M] {
	return func(m *M) *Osutils_CommandOutput_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) CommandOutput_Pointer(cmd interface{}) Osutils_CommandOutputChain[M] {
	return func(m *M) *Osutils_CommandOutput_Call {
		expecter := _c(m)
		return expecter.CommandOutput(tests.RemoveInterfacePointer[*exec.Cmd](cmd))
	}
}

func (_c Osutils_CommandOutputChain[M]) Return_Pointer(_a0 *[]byte, _a1 *error) Osutils_CommandOutputChain[M] {
	return func(m *M) *Osutils_CommandOutput_Call {
		call := _c(m)
		return call.Return(*_a0, *_a1)
	}
}

type Osutils_SyscallKillChain[M any] func(*M) *Osutils_SyscallKill_Call

func (_c Osutils_ExpecterChain[M]) SyscallKill(pid interface{}, sig interface{}) Osutils_SyscallKillChain[M] {
	return func(m *M) *Osutils_SyscallKill_Call {
		expecter := _c(m)
		return expecter.SyscallKill(pid, sig)
	}
}

func (_c Osutils_SyscallKillChain[M]) Run(run func(pid int, sig syscall.Signal)) Osutils_SyscallKillChain[M] {
	return func(m *M) *Osutils_SyscallKill_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_SyscallKillChain[M]) Return(err error) Osutils_SyscallKillChain[M] {
	return func(m *M) *Osutils_SyscallKill_Call {
		call := _c(m)
		return call.Return(err)
	}
}

func (_c Osutils_SyscallKillChain[M]) RunAndReturn(run func(pid int, sig syscall.Signal) error) Osutils_SyscallKillChain[M] {
	return func(m *M) *Osutils_SyscallKill_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) SyscallKill_Pointer(pid interface{}, sig interface{}) Osutils_SyscallKillChain[M] {
	return func(m *M) *Osutils_SyscallKill_Call {
		expecter := _c(m)
		return expecter.SyscallKill(tests.RemoveInterfacePointer[int](pid), tests.RemoveInterfacePointer[syscall.Signal](sig))
	}
}

func (_c Osutils_SyscallKillChain[M]) Return_Pointer(err *error) Osutils_SyscallKillChain[M] {
	return func(m *M) *Osutils_SyscallKill_Call {
		call := _c(m)
		return call.Return(*err)
	}
}

type Osutils_StdoutPipeChain[M any] func(*M) *Osutils_StdoutPipe_Call

func (_c Osutils_ExpecterChain[M]) StdoutPipe(cmd interface{}) Osutils_StdoutPipeChain[M] {
	return func(m *M) *Osutils_StdoutPipe_Call {
		expecter := _c(m)
		return expecter.StdoutPipe(cmd)
	}
}

func (_c Osutils_StdoutPipeChain[M]) Run(run func(cmd *exec.Cmd)) Osutils_StdoutPipeChain[M] {
	return func(m *M) *Osutils_StdoutPipe_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_StdoutPipeChain[M]) Return(_a0 io.ReadCloser, _a1 error) Osutils_StdoutPipeChain[M] {
	return func(m *M) *Osutils_StdoutPipe_Call {
		call := _c(m)
		return call.Return(_a0, _a1)
	}
}

func (_c Osutils_StdoutPipeChain[M]) RunAndReturn(run func(cmd *exec.Cmd) (io.ReadCloser, error)) Osutils_StdoutPipeChain[M] {
	return func(m *M) *Osutils_StdoutPipe_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) StdoutPipe_Pointer(cmd interface{}) Osutils_StdoutPipeChain[M] {
	return func(m *M) *Osutils_StdoutPipe_Call {
		expecter := _c(m)
		return expecter.StdoutPipe(tests.RemoveInterfacePointer[*exec.Cmd](cmd))
	}
}

func (_c Osutils_StdoutPipeChain[M]) Return_Pointer(_a0 *io.ReadCloser, _a1 *error) Osutils_StdoutPipeChain[M] {
	return func(m *M) *Osutils_StdoutPipe_Call {
		call := _c(m)
		return call.Return(*_a0, *_a1)
	}
}

type Osutils_ReadDirChain[M any] func(*M) *Osutils_ReadDir_Call

func (_c Osutils_ExpecterChain[M]) ReadDir(name interface{}) Osutils_ReadDirChain[M] {
	return func(m *M) *Osutils_ReadDir_Call {
		expecter := _c(m)
		return expecter.ReadDir(name)
	}
}

func (_c Osutils_ReadDirChain[M]) Run(run func(name string)) Osutils_ReadDirChain[M] {
	return func(m *M) *Osutils_ReadDir_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_ReadDirChain[M]) Return(_a0 []fs.DirEntry, _a1 error) Osutils_ReadDirChain[M] {
	return func(m *M) *Osutils_ReadDir_Call {
		call := _c(m)
		return call.Return(_a0, _a1)
	}
}

func (_c Osutils_ReadDirChain[M]) RunAndReturn(run func(name string) ([]fs.DirEntry, error)) Osutils_ReadDirChain[M] {
	return func(m *M) *Osutils_ReadDir_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) ReadDir_Pointer(name interface{}) Osutils_ReadDirChain[M] {
	return func(m *M) *Osutils_ReadDir_Call {
		expecter := _c(m)
		return expecter.ReadDir(tests.RemoveInterfacePointer[string](name))
	}
}

func (_c Osutils_ReadDirChain[M]) Return_Pointer(_a0 *[]fs.DirEntry, _a1 *error) Osutils_ReadDirChain[M] {
	return func(m *M) *Osutils_ReadDir_Call {
		call := _c(m)
		return call.Return(*_a0, *_a1)
	}
}

type Osutils_StatChain[M any] func(*M) *Osutils_Stat_Call

func (_c Osutils_ExpecterChain[M]) Stat(name interface{}) Osutils_StatChain[M] {
	return func(m *M) *Osutils_Stat_Call {
		expecter := _c(m)
		return expecter.Stat(name)
	}
}

func (_c Osutils_StatChain[M]) Run(run func(name string)) Osutils_StatChain[M] {
	return func(m *M) *Osutils_Stat_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_StatChain[M]) Return(_a0 fs.FileInfo, _a1 error) Osutils_StatChain[M] {
	return func(m *M) *Osutils_Stat_Call {
		call := _c(m)
		return call.Return(_a0, _a1)
	}
}

func (_c Osutils_StatChain[M]) RunAndReturn(run func(name string) (fs.FileInfo, error)) Osutils_StatChain[M] {
	return func(m *M) *Osutils_Stat_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) Stat_Pointer(name interface{}) Osutils_StatChain[M] {
	return func(m *M) *Osutils_Stat_Call {
		expecter := _c(m)
		return expecter.Stat(tests.RemoveInterfacePointer[string](name))
	}
}

func (_c Osutils_StatChain[M]) Return_Pointer(_a0 *fs.FileInfo, _a1 *error) Osutils_StatChain[M] {
	return func(m *M) *Osutils_Stat_Call {
		call := _c(m)
		return call.Return(*_a0, *_a1)
	}
}

type Osutils_OpenChain[M any] func(*M) *Osutils_Open_Call

func (_c Osutils_ExpecterChain[M]) Open(name interface{}) Osutils_OpenChain[M] {
	return func(m *M) *Osutils_Open_Call {
		expecter := _c(m)
		return expecter.Open(name)
	}
}

func (_c Osutils_OpenChain[M]) Run(run func(name string)) Osutils_OpenChain[M] {
	return func(m *M) *Osutils_Open_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_OpenChain[M]) Return(_a0 *os.File, _a1 error) Osutils_OpenChain[M] {
	return func(m *M) *Osutils_Open_Call {
		call := _c(m)
		return call.Return(_a0, _a1)
	}
}

func (_c Osutils_OpenChain[M]) RunAndReturn(run func(name string) (*os.File, error)) Osutils_OpenChain[M] {
	return func(m *M) *Osutils_Open_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) Open_Pointer(name interface{}) Osutils_OpenChain[M] {
	return func(m *M) *Osutils_Open_Call {
		expecter := _c(m)
		return expecter.Open(tests.RemoveInterfacePointer[string](name))
	}
}

func (_c Osutils_OpenChain[M]) Return_Pointer(_a0 **os.File, _a1 *error) Osutils_OpenChain[M] {
	return func(m *M) *Osutils_Open_Call {
		call := _c(m)
		return call.Return(*_a0, *_a1)
	}
}

type Osutils_CreateChain[M any] func(*M) *Osutils_Create_Call

func (_c Osutils_ExpecterChain[M]) Create(name interface{}) Osutils_CreateChain[M] {
	return func(m *M) *Osutils_Create_Call {
		expecter := _c(m)
		return expecter.Create(name)
	}
}

func (_c Osutils_CreateChain[M]) Run(run func(name string)) Osutils_CreateChain[M] {
	return func(m *M) *Osutils_Create_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_CreateChain[M]) Return(_a0 *os.File, _a1 error) Osutils_CreateChain[M] {
	return func(m *M) *Osutils_Create_Call {
		call := _c(m)
		return call.Return(_a0, _a1)
	}
}

func (_c Osutils_CreateChain[M]) RunAndReturn(run func(name string) (*os.File, error)) Osutils_CreateChain[M] {
	return func(m *M) *Osutils_Create_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) Create_Pointer(name interface{}) Osutils_CreateChain[M] {
	return func(m *M) *Osutils_Create_Call {
		expecter := _c(m)
		return expecter.Create(tests.RemoveInterfacePointer[string](name))
	}
}

func (_c Osutils_CreateChain[M]) Return_Pointer(_a0 **os.File, _a1 *error) Osutils_CreateChain[M] {
	return func(m *M) *Osutils_Create_Call {
		call := _c(m)
		return call.Return(*_a0, *_a1)
	}
}

type Osutils_MkdirChain[M any] func(*M) *Osutils_Mkdir_Call

func (_c Osutils_ExpecterChain[M]) Mkdir(name interface{}, mode interface{}) Osutils_MkdirChain[M] {
	return func(m *M) *Osutils_Mkdir_Call {
		expecter := _c(m)
		return expecter.Mkdir(name, mode)
	}
}

func (_c Osutils_MkdirChain[M]) Run(run func(name string, mode os.FileMode)) Osutils_MkdirChain[M] {
	return func(m *M) *Osutils_Mkdir_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_MkdirChain[M]) Return(_a0 error) Osutils_MkdirChain[M] {
	return func(m *M) *Osutils_Mkdir_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Osutils_MkdirChain[M]) RunAndReturn(run func(name string, mode os.FileMode) error) Osutils_MkdirChain[M] {
	return func(m *M) *Osutils_Mkdir_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) Mkdir_Pointer(name interface{}, mode interface{}) Osutils_MkdirChain[M] {
	return func(m *M) *Osutils_Mkdir_Call {
		expecter := _c(m)
		return expecter.Mkdir(tests.RemoveInterfacePointer[string](name), tests.RemoveInterfacePointer[os.FileMode](mode))
	}
}

func (_c Osutils_MkdirChain[M]) Return_Pointer(_a0 *error) Osutils_MkdirChain[M] {
	return func(m *M) *Osutils_Mkdir_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}

type Osutils_MkdirAllChain[M any] func(*M) *Osutils_MkdirAll_Call

func (_c Osutils_ExpecterChain[M]) MkdirAll(name interface{}, mode interface{}) Osutils_MkdirAllChain[M] {
	return func(m *M) *Osutils_MkdirAll_Call {
		expecter := _c(m)
		return expecter.MkdirAll(name, mode)
	}
}

func (_c Osutils_MkdirAllChain[M]) Run(run func(name string, mode os.FileMode)) Osutils_MkdirAllChain[M] {
	return func(m *M) *Osutils_MkdirAll_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_MkdirAllChain[M]) Return(_a0 error) Osutils_MkdirAllChain[M] {
	return func(m *M) *Osutils_MkdirAll_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Osutils_MkdirAllChain[M]) RunAndReturn(run func(name string, mode os.FileMode) error) Osutils_MkdirAllChain[M] {
	return func(m *M) *Osutils_MkdirAll_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) MkdirAll_Pointer(name interface{}, mode interface{}) Osutils_MkdirAllChain[M] {
	return func(m *M) *Osutils_MkdirAll_Call {
		expecter := _c(m)
		return expecter.MkdirAll(tests.RemoveInterfacePointer[string](name), tests.RemoveInterfacePointer[os.FileMode](mode))
	}
}

func (_c Osutils_MkdirAllChain[M]) Return_Pointer(_a0 *error) Osutils_MkdirAllChain[M] {
	return func(m *M) *Osutils_MkdirAll_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}

type Osutils_RemoveChain[M any] func(*M) *Osutils_Remove_Call

func (_c Osutils_ExpecterChain[M]) Remove(name interface{}) Osutils_RemoveChain[M] {
	return func(m *M) *Osutils_Remove_Call {
		expecter := _c(m)
		return expecter.Remove(name)
	}
}

func (_c Osutils_RemoveChain[M]) Run(run func(name string)) Osutils_RemoveChain[M] {
	return func(m *M) *Osutils_Remove_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_RemoveChain[M]) Return(_a0 error) Osutils_RemoveChain[M] {
	return func(m *M) *Osutils_Remove_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Osutils_RemoveChain[M]) RunAndReturn(run func(name string) error) Osutils_RemoveChain[M] {
	return func(m *M) *Osutils_Remove_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) Remove_Pointer(name interface{}) Osutils_RemoveChain[M] {
	return func(m *M) *Osutils_Remove_Call {
		expecter := _c(m)
		return expecter.Remove(tests.RemoveInterfacePointer[string](name))
	}
}

func (_c Osutils_RemoveChain[M]) Return_Pointer(_a0 *error) Osutils_RemoveChain[M] {
	return func(m *M) *Osutils_Remove_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}

type Osutils_RemoveAllChain[M any] func(*M) *Osutils_RemoveAll_Call

func (_c Osutils_ExpecterChain[M]) RemoveAll(path interface{}) Osutils_RemoveAllChain[M] {
	return func(m *M) *Osutils_RemoveAll_Call {
		expecter := _c(m)
		return expecter.RemoveAll(path)
	}
}

func (_c Osutils_RemoveAllChain[M]) Run(run func(path string)) Osutils_RemoveAllChain[M] {
	return func(m *M) *Osutils_RemoveAll_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_RemoveAllChain[M]) Return(_a0 error) Osutils_RemoveAllChain[M] {
	return func(m *M) *Osutils_RemoveAll_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Osutils_RemoveAllChain[M]) RunAndReturn(run func(path string) error) Osutils_RemoveAllChain[M] {
	return func(m *M) *Osutils_RemoveAll_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) RemoveAll_Pointer(path interface{}) Osutils_RemoveAllChain[M] {
	return func(m *M) *Osutils_RemoveAll_Call {
		expecter := _c(m)
		return expecter.RemoveAll(tests.RemoveInterfacePointer[string](path))
	}
}

func (_c Osutils_RemoveAllChain[M]) Return_Pointer(_a0 *error) Osutils_RemoveAllChain[M] {
	return func(m *M) *Osutils_RemoveAll_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}

type Osutils_GetenvChain[M any] func(*M) *Osutils_Getenv_Call

func (_c Osutils_ExpecterChain[M]) Getenv(key interface{}) Osutils_GetenvChain[M] {
	return func(m *M) *Osutils_Getenv_Call {
		expecter := _c(m)
		return expecter.Getenv(key)
	}
}

func (_c Osutils_GetenvChain[M]) Run(run func(key string)) Osutils_GetenvChain[M] {
	return func(m *M) *Osutils_Getenv_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_GetenvChain[M]) Return(_a0 string) Osutils_GetenvChain[M] {
	return func(m *M) *Osutils_Getenv_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Osutils_GetenvChain[M]) RunAndReturn(run func(key string) string) Osutils_GetenvChain[M] {
	return func(m *M) *Osutils_Getenv_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) Getenv_Pointer(key interface{}) Osutils_GetenvChain[M] {
	return func(m *M) *Osutils_Getenv_Call {
		expecter := _c(m)
		return expecter.Getenv(tests.RemoveInterfacePointer[string](key))
	}
}

func (_c Osutils_GetenvChain[M]) Return_Pointer(_a0 *string) Osutils_GetenvChain[M] {
	return func(m *M) *Osutils_Getenv_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}

type Osutils_IoReadAllChain[M any] func(*M) *Osutils_IoReadAll_Call

func (_c Osutils_ExpecterChain[M]) IoReadAll(r interface{}) Osutils_IoReadAllChain[M] {
	return func(m *M) *Osutils_IoReadAll_Call {
		expecter := _c(m)
		return expecter.IoReadAll(r)
	}
}

func (_c Osutils_IoReadAllChain[M]) Run(run func(r io.Reader)) Osutils_IoReadAllChain[M] {
	return func(m *M) *Osutils_IoReadAll_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_IoReadAllChain[M]) Return(_a0 []byte, _a1 error) Osutils_IoReadAllChain[M] {
	return func(m *M) *Osutils_IoReadAll_Call {
		call := _c(m)
		return call.Return(_a0, _a1)
	}
}

func (_c Osutils_IoReadAllChain[M]) RunAndReturn(run func(r io.Reader) ([]byte, error)) Osutils_IoReadAllChain[M] {
	return func(m *M) *Osutils_IoReadAll_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) IoReadAll_Pointer(r interface{}) Osutils_IoReadAllChain[M] {
	return func(m *M) *Osutils_IoReadAll_Call {
		expecter := _c(m)
		return expecter.IoReadAll(tests.RemoveInterfacePointer[io.Reader](r))
	}
}

func (_c Osutils_IoReadAllChain[M]) Return_Pointer(_a0 *[]byte, _a1 *error) Osutils_IoReadAllChain[M] {
	return func(m *M) *Osutils_IoReadAll_Call {
		call := _c(m)
		return call.Return(*_a0, *_a1)
	}
}

type Osutils_JsonMarshalChain[M any] func(*M) *Osutils_JsonMarshal_Call

func (_c Osutils_ExpecterChain[M]) JsonMarshal(v interface{}) Osutils_JsonMarshalChain[M] {
	return func(m *M) *Osutils_JsonMarshal_Call {
		expecter := _c(m)
		return expecter.JsonMarshal(v)
	}
}

func (_c Osutils_JsonMarshalChain[M]) Run(run func(v any)) Osutils_JsonMarshalChain[M] {
	return func(m *M) *Osutils_JsonMarshal_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_JsonMarshalChain[M]) Return(_a0 []byte, _a1 error) Osutils_JsonMarshalChain[M] {
	return func(m *M) *Osutils_JsonMarshal_Call {
		call := _c(m)
		return call.Return(_a0, _a1)
	}
}

func (_c Osutils_JsonMarshalChain[M]) RunAndReturn(run func(v any) ([]byte, error)) Osutils_JsonMarshalChain[M] {
	return func(m *M) *Osutils_JsonMarshal_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) JsonMarshal_Pointer(v interface{}) Osutils_JsonMarshalChain[M] {
	return func(m *M) *Osutils_JsonMarshal_Call {
		expecter := _c(m)
		return expecter.JsonMarshal(tests.RemoveInterfacePointer[any](v))
	}
}

func (_c Osutils_JsonMarshalChain[M]) Return_Pointer(_a0 *[]byte, _a1 *error) Osutils_JsonMarshalChain[M] {
	return func(m *M) *Osutils_JsonMarshal_Call {
		call := _c(m)
		return call.Return(*_a0, *_a1)
	}
}

type Osutils_JsonUnmarshalChain[M any] func(*M) *Osutils_JsonUnmarshal_Call

func (_c Osutils_ExpecterChain[M]) JsonUnmarshal(data interface{}, v interface{}) Osutils_JsonUnmarshalChain[M] {
	return func(m *M) *Osutils_JsonUnmarshal_Call {
		expecter := _c(m)
		return expecter.JsonUnmarshal(data, v)
	}
}

func (_c Osutils_JsonUnmarshalChain[M]) Run(run func(data []byte, v any)) Osutils_JsonUnmarshalChain[M] {
	return func(m *M) *Osutils_JsonUnmarshal_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_JsonUnmarshalChain[M]) Return(_a0 error) Osutils_JsonUnmarshalChain[M] {
	return func(m *M) *Osutils_JsonUnmarshal_Call {
		call := _c(m)
		return call.Return(_a0)
	}
}

func (_c Osutils_JsonUnmarshalChain[M]) RunAndReturn(run func(data []byte, v any) error) Osutils_JsonUnmarshalChain[M] {
	return func(m *M) *Osutils_JsonUnmarshal_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) JsonUnmarshal_Pointer(data interface{}, v interface{}) Osutils_JsonUnmarshalChain[M] {
	return func(m *M) *Osutils_JsonUnmarshal_Call {
		expecter := _c(m)
		return expecter.JsonUnmarshal(tests.RemoveInterfacePointer[[]byte](data), tests.RemoveInterfacePointer[any](v))
	}
}

func (_c Osutils_JsonUnmarshalChain[M]) Return_Pointer(_a0 *error) Osutils_JsonUnmarshalChain[M] {
	return func(m *M) *Osutils_JsonUnmarshal_Call {
		call := _c(m)
		return call.Return(*_a0)
	}
}

type Osutils_JsonMarshalIndentChain[M any] func(*M) *Osutils_JsonMarshalIndent_Call

func (_c Osutils_ExpecterChain[M]) JsonMarshalIndent(v interface{}, prefix interface{}, indent interface{}) Osutils_JsonMarshalIndentChain[M] {
	return func(m *M) *Osutils_JsonMarshalIndent_Call {
		expecter := _c(m)
		return expecter.JsonMarshalIndent(v, prefix, indent)
	}
}

func (_c Osutils_JsonMarshalIndentChain[M]) Run(run func(v any, prefix string, indent string)) Osutils_JsonMarshalIndentChain[M] {
	return func(m *M) *Osutils_JsonMarshalIndent_Call {
		call := _c(m)
		return call.Run(run)
	}
}

func (_c Osutils_JsonMarshalIndentChain[M]) Return(_a0 []byte, _a1 error) Osutils_JsonMarshalIndentChain[M] {
	return func(m *M) *Osutils_JsonMarshalIndent_Call {
		call := _c(m)
		return call.Return(_a0, _a1)
	}
}

func (_c Osutils_JsonMarshalIndentChain[M]) RunAndReturn(run func(v any, prefix string, indent string) ([]byte, error)) Osutils_JsonMarshalIndentChain[M] {
	return func(m *M) *Osutils_JsonMarshalIndent_Call {
		call := _c(m)
		return call.RunAndReturn(run)
	}
}

func (_c Osutils_ExpecterChain[M]) JsonMarshalIndent_Pointer(v interface{}, prefix interface{}, indent interface{}) Osutils_JsonMarshalIndentChain[M] {
	return func(m *M) *Osutils_JsonMarshalIndent_Call {
		expecter := _c(m)
		return expecter.JsonMarshalIndent(tests.RemoveInterfacePointer[any](v), tests.RemoveInterfacePointer[string](prefix), tests.RemoveInterfacePointer[string](indent))
	}
}

func (_c Osutils_JsonMarshalIndentChain[M]) Return_Pointer(_a0 *[]byte, _a1 *error) Osutils_JsonMarshalIndentChain[M] {
	return func(m *M) *Osutils_JsonMarshalIndent_Call {
		call := _c(m)
		return call.Return(*_a0, *_a1)
	}
}
